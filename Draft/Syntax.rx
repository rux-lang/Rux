// Single-line comment

/*
	Multi-line comment
	This is the draft of Rux programming language syntax
	Licensed under the MIT license
*/

// Primitive signed integer data types
int			// platform-dependent
int8
int16
int32
int64
int128
int256
int512

// Primitive unsigned integer data types
uint		// platform-dependent
uint8
uint16
uint32
uint64
uint128
uint256
uint512

// Primitive floating data types
float		// platform-dependent
float8
float16
float32
float64
float80
float128
float256
float512

// Primitive boolean data types
bool		// platform-dependent
bool8
bool16
bool32
bool64
bool128
bool256
bool512

// Primitive character data types
char 		// platfrom-dependent
char8
char16
char32
char64
char128
char256
char512

// Literals
1000			// Decimal value
0b11101100		// Binary value
0o123			// Octal value
0x59FF00AB		// Hexadecimal value
3.1415			// Floating point value
1.56e-5			// Floating point value (exponential format)
true			// Boolean constant
false			// Boolean constant
"Hello World"	// String literal
'n'				// Character literal

// Enum declaration
enum DayOfWeek
{
	Monday,
	Tuesday,
	Wednesday,
	Thursday,
	Friday,
	Saturday,
	Sunday
}

// Struct declaration
struct Point
{
	x: float64,
	y: float64
}

struct Triangle
{
	p0, p1, p2: Point
}

func Close()
{
	// Function body
	let a = 10;
	let b = 20;
	let c = a || b;
}

func Sin(x: float): float
{
	return 0.0;
}

func Print(message: *const Char, color: uint32 = 0x0000FF00)
{
	// Function body
}

func Max(x, y: int): int
{
	if (x > y)
	{
		return x;
	}
	else
	{
		return y;
	}
}

// Generic function
func Min<T>(x, y: T): T
{
	return x < y ? x : y;
}

// Function declaration
func Add(x, y: float32)
{
	return x + y;
}

// Variables
var i = 10;
var i: int = 10;
var val = 3.1415 as float64;
var val = 3.1415float64;
var val = float32(3.1415);
var a = 0x11011011 as uint8;

for (var i = 1; i < 10; i++)
{
	if( i == 5)
		break;
}

// Pointers
var ptr: **char;
var ptr: *const char
const ptr: *char;
const ptr: *const char;
var data: *int64;

// Mutability
var value: int = 1;
let value: int = 1;
const value: int = 1;

// Module system / namespaces
module Math
{
	public func Sin(x: float): float;
	public func Max(x, y: float): float;
}

// Import from modules
use Math::Sin;
use Math:*;
use Math:Sin as Sinf;
use Math; // should always specify full path Math::Sin(value)

// Using Assembler
asm func Sys()
{
	xor eax, eax
	ret eax
}
